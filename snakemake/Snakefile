from pathlib import Path

# ======================================================
# Config file
# ======================================================
configfile: "config.yaml"

def read_indexes_from_file_of_files(indexes_fof):
    with open(indexes_fof) as indexes_fof_filehandler:
        indexes = indexes_fof_filehandler.readlines()
    indexes = [index.strip() for index in indexes if len(index.strip()) > 0]
    return indexes

# ======================================================
# global vars
# ======================================================
cache_mem_gb = config['cache_mem_gb']
singularity_img = config['singularity_img']
threshold = config['threshold']
indexes_fof = config['indexes']
fasta = config['fasta']
indexes = read_indexes_from_file_of_files(indexes_fof)

# output dealing
output_dir = Path(config['output_dir'])
output_dir.mkdir(parents=True, exist_ok=True)
intermediate_jsons_output = output_dir / "intermediate_jsons"
intermediate_jsons_output.mkdir(parents=True, exist_ok=True)
all_intermediate_jsons = [
    intermediate_jsons_output / f"result_{i}.json" for i in range(len(indexes))
]


rule all:
    input:
        output_dir / "result.json"

rule concatenate_jsons_of_all_indexes:
    input:
        all_intermediate_jsons = all_intermediate_jsons
    output:
        result_json = output_dir / "result.json"
    threads: 1
    log: "logs/concatenate_jsons_of_all_indexes.log"
    resources:
        mem_mb = lambda wildcards, attempt: 10000 * attempt
    singularity:
        singularity_img
    script:
        "scripts/concatenate_jsons_of_all_indexes.py"


rule bulk_search_fasta_in_an_index:
    input:
        fasta = fasta,
        index = lambda wildcards: indexes[int(wildcards.i)]
    output:
        intermediate_json_output = intermediate_jsons_output / "result_{i}.json"
    threads:
        1
    params:
    	threshold = threshold,
        cache_mem_gb = cache_mem_gb
    log:
        "logs/bulk_search_fasta_in_an_index.{i}.log"
    resources:
        mem_mb = lambda wildcards, attempt: int(cache_mem_gb*1024 * 1.3) * attempt
    singularity:
        singularity_img
    shell:
    	"bigsi bulk_search -t {params.threshold} -c {input.index} -to {params.cache_mem_gb} {input.fasta} > {output.intermediate_json_output}"
